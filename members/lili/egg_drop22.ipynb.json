{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "is_broken : változó, boolean, eltört-e vagy sem \n",
    "\n",
    "eggdrop_stages : lista, boolean\n",
    "\n",
    "eggdrop_stages_test : lista, boolean, ezzel teszteljük majd \n",
    "\n",
    "number_eggs : alapból 2, ha TRUE a törés, -1\n",
    "\n",
    "az első tojással a sárkányoshoz hasonló algoritmust csinálunk, hogy minél jobban lecsökkentsük az intervallumot, melyben meg kell találnunk a törés helyét. a második tojást (és backup algoritmust), akkor fogjuk használni, ha az első tojás eltört közben "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "eggdrop_stages_test = [False, False, False,False, False, False,False, False, False,False, False, False,False, False, False,False, False, False,False, False, False,False, False, False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting jkg_evaluators\n",
      "Installing collected packages: jkg-evaluators\n",
      "Successfully installed jkg-evaluators-0.0.2\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install jkg_evaluators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def egg_drop_solution1(eggdrop_stages):\n",
    "    number_eggs = 2\n",
    "    stage = 10\n",
    "    jump = 10\n",
    "    \n",
    "    while stage < 101:\n",
    "        if number_eggs == 2:\n",
    "            if not eggdrop_stages(stage):\n",
    "                stage += jump\n",
    "            else:\n",
    "                number_eggs = 1\n",
    "                stage = stage - 9\n",
    "        else:\n",
    "            if not eggdrop_stages(stage):\n",
    "                stage += 1\n",
    "            else:\n",
    "                return stage - 1\n",
    "                \n",
    "            \n",
    "           \n",
    "    return 100\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from jkg_evaluators import eggdrop_100floor_2egg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- success rate: 101/101 (100.0%)\n",
      "- error count: 0\n",
      "- best performance: 2\n",
      "- worst performance: 20\n",
      "- mean performance: 10.990099009900991\n"
     ]
    }
   ],
   "source": [
    "eggdrop_100floor_2egg.evaluate(egg_drop_solution1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
