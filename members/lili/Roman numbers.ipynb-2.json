{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "r = Roman(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'X'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r.roman"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TDD\n",
    "#### Test Driven Development"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r1 = Roman(5)\n",
    "r1.roman == 'V'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "r2 = Roman('XV')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2.arab\n",
    "r2.arab == 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r3 = Roman (20)\n",
    "r3.roman == 'XX'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "for a in range(2000, 30000):\n",
    "    rt1 = Roman(a)\n",
    "    rt2 = Roman(rt1.roman)\n",
    "    if rt1.arab != rt2.arab:\n",
    "        print('JAJJJJ')\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rt1.arab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "roms = pd.concat([pd.DataFrame(\n",
    "    [{'arab':a.text.split()[0],'roman':a.text.split()[1]} for a in \\\n",
    " BeautifulSoup(requests.get('https://smorgasborg.artlung.com/roman-numerals/page/%d' % p) \\\n",
    "              .content,'html5lib').find('pre').find_all('a')]) for p in range(1,11)])\\\n",
    "    .loc[lambda df: df['arab'] != '0',:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       arab              roman\n",
      "1         1                  I\n",
      "2         2                 II\n",
      "3         3                III\n",
      "4         4                 IV\n",
      "5         5                  V\n",
      "...     ...                ...\n",
      "996    9996    MMMMMMMMMCMXCVI\n",
      "997    9997   MMMMMMMMMCMXCVII\n",
      "998    9998  MMMMMMMMMCMXCVIII\n",
      "999    9999    MMMMMMMMMCMXCIX\n",
      "1000  10000         MMMMMMMMMM\n",
      "\n",
      "[10009 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "print(roms)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rom2ar_test(fun): # ez azokat az eseteket adja vissza, ahol az átváltás helytelen\n",
    "    calc = roms['roman'].apply(fun)\n",
    "    tru = roms['arab'].apply(int)        \n",
    "    return roms[calc != tru]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rom2ar(rom_string):\n",
    "    \n",
    "    arab_helyiertekek_lista = []\n",
    "    \n",
    "    for i in rom_string:\n",
    "        n = 0\n",
    "        if i == 'I':\n",
    "            n = 1\n",
    "        elif i == 'V':\n",
    "            n = 5\n",
    "        elif i == 'X':\n",
    "            n = 10\n",
    "        elif i == 'L':\n",
    "            n = 50\n",
    "        elif i == 'C':\n",
    "            n = 100\n",
    "        elif i == 'D':\n",
    "            n = 500\n",
    "        elif i == 'M':\n",
    "            n = 1000\n",
    "    \n",
    "        arab_helyiertekek_lista.append(n)\n",
    "        \n",
    "    helyiertek = 0\n",
    "    helyiertekek = []\n",
    "    nagyobb_helyiertek = arab_helyiertekek_lista[0]\n",
    "    \n",
    "    for szam in arab_helyiertekek_lista:\n",
    "        \n",
    "        if nagyobb_helyiertek < int(szam):\n",
    "            helyiertekek.append(helyiertek - 1)\n",
    "            \n",
    "        nagyobb_helyiertek = szam\n",
    "        helyiertek += 1\n",
    "        \n",
    "    arab_output = 0\n",
    "\n",
    "    for i in arab_helyiertekek_lista:\n",
    "        arab_output += i\n",
    "        \n",
    "    for i in helyiertekek:\n",
    "        arab_output -= 2 * arab_helyiertekek_lista[i]\n",
    "        \n",
    "    return arab_output\n",
    "    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3055"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rom2ar('MMMLV')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>arab</th>\n",
       "      <th>roman</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [arab, roman]\n",
       "Index: []"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rom2ar_test(rom2ar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Roman:\n",
    "    \n",
    "    def __init__(self, num):\n",
    "        \n",
    "        if isinstance(num, str):\n",
    "            self.roman = num\n",
    "            # TODO: somehow add .arab!\n",
    "            self.arab = self.rom2ar()\n",
    "        \n",
    "        if isinstance(num, int):\n",
    "            self.arab = num\n",
    "            self.roman = 'I'\n",
    "            \n",
    "        \n",
    "    def __add__(self,other):\n",
    "        \n",
    "        summa = self.arab + other.arab\n",
    "        \n",
    "        return Roman(summa)\n",
    "        \n",
    "    def __lt__(self,other):\n",
    "        \n",
    "        return self.arab < self.roman\n",
    "    \n",
    "    def rom2ar(self):\n",
    "    \n",
    "        arab_helyiertekek_lista = []\n",
    "    \n",
    "        for i in self.roman:\n",
    "            n = 0\n",
    "            if i == 'I':\n",
    "                n = 1\n",
    "            elif i == 'V':\n",
    "                n = 5\n",
    "            elif i == 'X':\n",
    "                n = 10\n",
    "            elif i == 'L':\n",
    "                n = 50\n",
    "            elif i == 'C':\n",
    "                n = 100\n",
    "            elif i == 'D':\n",
    "                n = 500\n",
    "            elif i == 'M':\n",
    "                n = 1000\n",
    "    \n",
    "            arab_helyiertekek_lista.append(n)\n",
    "\n",
    "        helyiertek = 0\n",
    "        helyiertekek = []\n",
    "        nagyobb_helyiertek = arab_helyiertekek_lista[0]\n",
    "\n",
    "        for szam in arab_helyiertekek_lista:\n",
    "            \n",
    "            if nagyobb_helyiertek < int(szam):\n",
    "                helyiertekek.append(helyiertek - 1)\n",
    "                \n",
    "            nagyobb_helyiertek = szam\n",
    "            helyiertek += 1\n",
    "\n",
    "        arab_output = 0\n",
    "\n",
    "        for i in arab_helyiertekek_lista:\n",
    "            arab_output += i\n",
    "\n",
    "        for i in helyiertekek:\n",
    "            arab_output -= 2 * arab_helyiertekek_lista[i]\n",
    "\n",
    "        return arab_output\n",
    "    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = Roman('VII')\n",
    "r.arab == 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
