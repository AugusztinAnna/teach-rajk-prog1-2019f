{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "is_broken : változó, boolean, eltört-e vagy sem \n",
    "\n",
    "eggdrop_stages : lista, boolean\n",
    "\n",
    "eggdrop_stages_test : lista, boolean, ezzel teszteljük majd \n",
    "\n",
    "number_eggs : alapból 2, ha TRUE a törés, -1\n",
    "\n",
    "az első tojással a sárkányoshoz hasonló algoritmust csinálunk, hogy minél jobban lecsökkentsük az intervallumot, melyben meg kell találnunk a törés helyét. a második tojást (és backup algoritmust), akkor fogjuk használni, ha az első tojás eltört közben "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "eggdrop_stages_test = [False, True, True, True, True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def egg_drop_solution1(eggdrop_stages):\n",
    "    number_eggs = 2\n",
    "    lowest_stage = 1\n",
    "    highest_stage = len(eggdrop_stages) - 1\n",
    "    numbers_drop = 0\n",
    "    \n",
    "    if number_eggs == 2:\n",
    "        middle_stage = int((highest_stage + \n",
    "                            lowest_stage)/2)\n",
    "        if not eggdrop_stages[middle_stage]:\n",
    "            numbers_drop = numbers_drop + 1\n",
    "            lowest_stage = middle_stage\n",
    "        else:\n",
    "            for i in eggdrop_stages:\n",
    "                if i == False:\n",
    "                    numbers_drop = numbers_drop + 1\n",
    "                    lowest_stage = i\n",
    "                    i = i + 1\n",
    "                else: \n",
    "                    numbers_drop = numbers_drop + 1\n",
    "                    lowest_stage = i\n",
    "                    break\n",
    "                \n",
    "            \n",
    "           \n",
    "    return print (lowest_stage + 1, numbers_drop)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 2\n"
     ]
    }
   ],
   "source": [
    "egg_drop_solution1(eggdrop_stages_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
